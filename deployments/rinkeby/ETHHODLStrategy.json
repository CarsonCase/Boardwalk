{
  "address": "0x860863842B9965B51A1c3A184A65D68fe4147A3f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swaps",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dex",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountUnderlying",
          "type": "uint256"
        }
      ],
      "name": "buySwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountToRemove",
          "type": "uint256"
        }
      ],
      "name": "closeSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dex",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountInvestment",
          "type": "uint256"
        }
      ],
      "name": "fund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_amount",
          "type": "int256"
        }
      ],
      "name": "getAmountOfUnderlyingForUSD",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountUnderlying",
          "type": "uint256"
        }
      ],
      "name": "getFlowRate",
      "outputs": [
        {
          "internalType": "int96",
          "name": "",
          "type": "int96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_underlyingAm",
          "type": "uint256"
        }
      ],
      "name": "getPriceUnderlyingUSD",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountToRemove",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "removeFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swaps",
      "outputs": [
        {
          "internalType": "contract ISwaps",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingExposedToSwaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingInvested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_new",
          "type": "int256"
        }
      ],
      "name": "updatePriceE18",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc86ba1c74a1e357bdad814f67373fa2abe2d724ae7d5f150144c76a3079a7555",
  "receipt": {
    "to": null,
    "from": "0x7A3876E516d7F221Eb4791410F7434F20f01773A",
    "contractAddress": "0x860863842B9965B51A1c3A184A65D68fe4147A3f",
    "transactionIndex": 22,
    "gasUsed": "2368589",
    "logsBloom": "0x
    "blockHash": "0xcb422da0b63d8a48b3bab08f35f22e1e4bb840ace4b78b606f0208c5054c811f",
    "transactionHash": "0xc86ba1c74a1e357bdad814f67373fa2abe2d724ae7d5f150144c76a3079a7555",
    "logs": [
      {
        "transactionIndex": 22,
        "blockNumber": 10516687,
        "transactionHash": "0xc86ba1c74a1e357bdad814f67373fa2abe2d724ae7d5f150144c76a3079a7555",
        "address": "0x860863842B9965B51A1c3A184A65D68fe4147A3f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007a3876e516d7f221eb4791410f7434f20f01773a"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0xcb422da0b63d8a48b3bab08f35f22e1e4bb840ace4b78b606f0208c5054c811f"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 10516687,
        "transactionHash": "0xc86ba1c74a1e357bdad814f67373fa2abe2d724ae7d5f150144c76a3079a7555",
        "address": "0xC975Ab048002DB8C3914094116AF50ef6cF6136c",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000860863842b9965b51a1c3a184a65d68fe4147a3f",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 19,
        "blockHash": "0xcb422da0b63d8a48b3bab08f35f22e1e4bb840ace4b78b606f0208c5054c811f"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 10516687,
        "transactionHash": "0xc86ba1c74a1e357bdad814f67373fa2abe2d724ae7d5f150144c76a3079a7555",
        "address": "0x860863842B9965B51A1c3A184A65D68fe4147A3f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000007a3876e516d7f221eb4791410f7434f20f01773a",
          "0x0000000000000000000000006d992c2a6b112f856d2d7da364b5453c6c94f60e"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0xcb422da0b63d8a48b3bab08f35f22e1e4bb840ace4b78b606f0208c5054c811f"
      }
    ],
    "blockNumber": 10516687,
    "cumulativeGasUsed": "3867521",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa3b171dE7DD7D732140c3628AcF2760Ee196C4c6",
    "0x6D992c2a6B112F856d2D7da364b5453c6c94f60e",
    "0x80cf0e0d515f78cD6EDE4D0F07F0C574BeC09664",
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"
  ],
  "numDeployments": 1,
  "solcInputHash": "7cb62472b26103e9c67679bc2886b7c4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swaps\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dex\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountUnderlying\",\"type\":\"uint256\"}],\"name\":\"buySwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToRemove\",\"type\":\"uint256\"}],\"name\":\"closeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dex\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountInvestment\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"}],\"name\":\"getAmountOfUnderlyingForUSD\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountUnderlying\",\"type\":\"uint256\"}],\"name\":\"getFlowRate\",\"outputs\":[{\"internalType\":\"int96\",\"name\":\"\",\"type\":\"int96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_underlyingAm\",\"type\":\"uint256\"}],\"name\":\"getPriceUnderlyingUSD\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToRemove\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"removeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"contract ISwaps\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingExposedToSwaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_new\",\"type\":\"int256\"}],\"name\":\"updatePriceE18\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Caron Case (carsonpcase@gmail.com) contract to standardize what strategies do \",\"kind\":\"dev\",\"methods\":{\"buySwap(uint256)\":{\"details\":\"function to buy swap on the strategy. Can only be done if it's free\"},\"fund(uint256)\":{\"details\":\"fund function to provide funds to the strategy override to provide with the actual logic of the investment strategy\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeFunds(uint256,address)\":{\"details\":\"function for owner (treasury) to remove funds \"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ETHHODLStrategy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/ETHHODLStrategy.sol\":\"ETHHODLStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0x7d189e23c0505cc5b43e3f9b0cf09deaab57ac29228061db7c55fa5484c4286e\"},\"contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\",\"keccak256\":\"0xb45e89fb2314353f3050c45cee0c98ce058760c109105047d391af970552739a\"},\"contracts/strategies/ETHHODLStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: None\\npragma solidity ^0.8.0;\\n\\nimport \\\"./StrategyStandard.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Router02.sol\\\";\\n\\n\\n/**\\n* @title ETHHODLStrategy\\n* @author Caron Case (carsonpcase@gmail.com)\\n    contract to standardize what strategies do \\n*/\\ncontract ETHHODLStrategy is StrategyStandard{\\n    // for testing\\n    address public eth;\\n\\n    IUniswapV2Router02 public dex;\\n    uint constant secondsInYear = 31540000;\\n\\n    int priceUSD = 2;\\n    int96 apr = 12;\\n\\n    uint constant SLIPPAGE = 5;                     // making this owner controlled is not a bad idea\\n    uint constant ONE_HUNDRED_PERCENT = 100;\\n    \\n    constructor(address _swaps, address _treasury, address _oracle, address _dex) StrategyStandard(_treasury, _oracle){\\n        swaps = ISwaps(_swaps);\\n        dex = IUniswapV2Router02(_dex);\\n        IERC20(stablecoin).approve(_dex,2**256-1);\\n        transferOwnership(_treasury);\\n        eth = dex.WETH();\\n    }\\n\\n    receive() payable external{\\n\\n    }\\n\\n    // TEST only\\n    function updatePriceE18(int _new) external{\\n        priceUSD = _new;\\n    }\\n\\n    function fund(uint256 _amountInvestment) public override onlyOwner{\\n        super.fund(_amountInvestment);\\n        address[] memory path = new address[](2);\\n        path[0] = stablecoin;\\n        path[1] = eth;\\n\\n        uint minOut = _getMinOut(_amountInvestment);\\n        dex.swapExactTokensForETH(_amountInvestment,minOut,path,address(this),block.timestamp + 30);\\n    }\\n\\n    function removeFunds(uint256 _amountToRemove, address _receiver) public override onlyOwner{\\n        require(_amountToRemove <= address(this).balance, \\\"Not enough eth in strategy\\\");\\n        super.removeFunds(_amountToRemove, _receiver);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = eth;\\n        path[1] = stablecoin;\\n\\n        uint minOut = _getMinOut(_amountToRemove);\\n        dex.swapExactETHForTokens{value: _amountToRemove}(minOut, path, _receiver, block.timestamp + 30);\\n    }\\n\\n    function getPriceUnderlyingUSD(uint _underlyingAm) public view override returns(int){\\n        (int price, uint8 decimals) = oracle.priceOf(eth);\\n        return((int(_underlyingAm) * price) / int(10**decimals));\\n    }\\n\\n    function getAmountOfUnderlyingForUSD(int _amount) public view override returns(int){\\n        (int price, uint8 decimals) = oracle.priceOf(eth);\\n        return((int(10**decimals) * (int(_amount)) / price));\\n    }\\n\\n    function getFlowRate(uint _amountUnderlying) public view returns(int96){\\n        return (int96(getPriceUnderlyingUSD(_amountUnderlying/secondsInYear)) * apr) / 100;\\n    }\\n\\n    /**\\n    * @dev override just handles swaps logic. Verifying underlying available is done in parent\\n     */\\n    function _issueSwap(address _issueTo, uint _amountUnderlying) internal override{\\n        swaps.newSwap(treasury,_issueTo, getFlowRate(_amountUnderlying),_amountUnderlying);\\n    }\\n\\n    function _getMinOut(uint _amountIn) internal pure returns(uint minOut){\\n        minOut = (_amountIn * (ONE_HUNDRED_PERCENT - SLIPPAGE)) / ONE_HUNDRED_PERCENT;\\n    }\\n\\n\\n}\",\"keccak256\":\"0xf175332196249a5a494aa8b0095bda1788e9543b51518d0e63b59d0ca4dcda2b\",\"license\":\"None\"},\"contracts/strategies/StrategyStandard.sol\":{\"content\":\"// SPDX-License-Identifier: None\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITreasury{\\n    function stablecoin() external returns(IERC20);\\n}\\n\\ninterface IOracle{\\n    function priceOf(address) external view returns(int,uint8);\\n}\\n\\ninterface ISwaps{\\n    function newSwap(address _receiver, address _payer, int96 _requiredFlowRate, uint _amountUnderlying) external;\\n}\\n\\n/**\\n* @title StrategyStandard\\n* @author Caron Case (carsonpcase@gmail.com)\\n    contract to standardize what strategies do \\n*/\\nabstract contract StrategyStandard is Ownable{\\n    address public immutable treasury;\\n    address internal stablecoin;\\n    uint256 public underlyingInvested;\\n    uint256 public underlyingExposedToSwaps;\\n    IOracle public oracle;\\n    ISwaps public swaps;\\n\\n    constructor(address _treasury, address _oracle) Ownable(){\\n        treasury = _treasury;\\n        stablecoin = address(ITreasury(_treasury).stablecoin());\\n        oracle = IOracle(_oracle);\\n    }\\n\\n    modifier onlySwaps(){\\n        require(msg.sender == address(swaps), \\\"StrategyStandard: Only Swaps contract can call this function\\\");\\n        _;\\n    }\\n\\n    function getPriceUnderlyingUSD(uint _underlyingAm) external view virtual returns(int){\\n        (int price, uint8 decimals) = oracle.priceOf(stablecoin);\\n        return((int(_underlyingAm) * price) / int(10**decimals));\\n    }\\n\\n    function getAmountOfUnderlyingForUSD(int _amount) public view virtual returns(int){\\n        (int price, uint8 decimals) = oracle.priceOf(stablecoin);\\n        return((int(10**decimals) * (int(_amount)) / price));\\n    }\\n\\n\\n    /**\\n    * @dev fund function to provide funds to the strategy\\n    * override to provide with the actual logic of the investment strategy\\n     */\\n    function fund(uint256 _amountInvestment) public virtual onlyOwner{\\n        underlyingInvested += _amountInvestment;\\n        IERC20(stablecoin).transferFrom(treasury, address(this), _amountInvestment);\\n    }   \\n\\n    /**\\n    * @dev function for owner (treasury) to remove funds \\n     */\\n    function removeFunds(uint256 _amountToRemove, address _receiver) public virtual onlyOwner{\\n        require(underlyingInvested > underlyingExposedToSwaps + _amountToRemove, \\\"There's not enough free assets in this strategy to remove this amount\\\"); \\n    }\\n\\n    function closeSwap(uint256 _amountToRemove) public virtual onlySwaps{\\n        underlyingExposedToSwaps -= _amountToRemove;\\n    }\\n\\n    /**\\n    * @dev function to buy swap on the strategy. Can only be done if it's free\\n     */\\n    function buySwap(uint256 _amountUnderlying) public virtual{\\n        require(underlyingInvested > underlyingExposedToSwaps + _amountUnderlying, \\\"There's not enough free assets in this strategy to invest this amount\\\"); \\n        underlyingExposedToSwaps += _amountUnderlying;\\n        _issueSwap(msg.sender, _amountUnderlying);\\n    }\\n    \\n\\n    /**\\n    * @dev handles logic of issuing swap\\n     */\\n    function _issueSwap(address _issueTo, uint _amountUnderlying) internal virtual{\\n        // issue NFT with supperfuild superapp\\n        // and send other end of NFT to treasury\\n    }\\n\\n}\",\"keccak256\":\"0x231d3133701c83fbc8c9ef030240ce43f706802d9a0df289545e0a9dbb9c0772\",\"license\":\"None\"}},\"version\":1}",
  "bytecode": "0x60a06040526002600855600c600960006101000a8154816bffffffffffffffffffffffff0219169083600b0b6bffffffffffffffffffffffff1602179055503480156200004b57600080fd5b5060405162002f2a38038062002f2a8339818101604052810190620000719190620006a4565b828262000093620000876200042860201b60201c565b6200043060201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff1663e9cbd8226040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200011357600080fd5b505af115801562000128573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200014e91906200073c565b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505083600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401620002d2929190620007d8565b602060405180830381600087803b158015620002ed57600080fd5b505af115801562000302573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000328919062000710565b506200033a83620004f460201b60201c565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015620003a357600080fd5b505afa158015620003b8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003de919062000678565b600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505062000992565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620005046200042860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff166200052a6200060a60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000583576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200057a9062000827565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620005f6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005ed9062000805565b60405180910390fd5b62000607816200043060201b60201c565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600081519050620006448162000944565b92915050565b6000815190506200065b816200095e565b92915050565b600081519050620006728162000978565b92915050565b6000602082840312156200068b57600080fd5b60006200069b8482850162000633565b91505092915050565b60008060008060808587031215620006bb57600080fd5b6000620006cb8782880162000633565b9450506020620006de8782880162000633565b9350506040620006f18782880162000633565b9250506060620007048782880162000633565b91505092959194509250565b6000602082840312156200072357600080fd5b600062000733848285016200064a565b91505092915050565b6000602082840312156200074f57600080fd5b60006200075f8482850162000661565b91505092915050565b62000773816200085a565b82525050565b6200078481620008b8565b82525050565b60006200079960268362000849565b9150620007a682620008cc565b604082019050919050565b6000620007c060208362000849565b9150620007cd826200091b565b602082019050919050565b6000604082019050620007ef600083018562000768565b620007fe602083018462000779565b9392505050565b6000602082019050818103600083015262000820816200078a565b9050919050565b600060208201905081810360008301526200084281620007b1565b9050919050565b600082825260208201905092915050565b600062000867826200088e565b9050919050565b60008115159050919050565b600062000887826200085a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000620008c582620008ae565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6200094f816200085a565b81146200095b57600080fd5b50565b62000969816200086e565b81146200097557600080fd5b50565b62000983816200087a565b81146200098f57600080fd5b50565b60805160601c61256b620009bf600039600081816107e80152818161126b01526113bf015261256b6000f3fe60806040526004361061010d5760003560e01c80638c7c9e0c11610095578063bb2d6f9d11610064578063bb2d6f9d14610366578063ca1d209d14610391578063e43c520d146103ba578063e7a926eb146103e3578063f2fde38b1461040c57610114565b80638c7c9e0c146102aa5780638da5cb5b146102d55780639583f0f2146103005780639fa538be1461032957610114565b8063692058c2116100dc578063692058c2146101d5578063715018a61461020057806376d560d7146102175780637dc0d1d01461025457806384039edc1461027f57610114565b806338f7d50f146101195780633e4d9912146101565780634c9841851461017f57806361d027b3146101aa57610114565b3661011457005b600080fd5b34801561012557600080fd5b50610140600480360381019061013b9190611675565b610435565b60405161014d919061199d565b60405180910390f35b34801561016257600080fd5b5061017d6004803603810190610178919061169e565b61047c565b005b34801561018b57600080fd5b506101946107c0565b6040516101a1919061194c565b60405180910390f35b3480156101b657600080fd5b506101bf6107e6565b6040516101cc919061189a565b60405180910390f35b3480156101e157600080fd5b506101ea61080a565b6040516101f79190611967565b60405180910390f35b34801561020c57600080fd5b50610215610830565b005b34801561022357600080fd5b5061023e60048036038101906102399190611675565b6108b8565b60405161024b9190611982565b60405180910390f35b34801561026057600080fd5b506102696109b9565b6040516102769190611931565b60405180910390f35b34801561028b57600080fd5b506102946109df565b6040516102a19190611a78565b60405180910390f35b3480156102b657600080fd5b506102bf6109e5565b6040516102cc919061189a565b60405180910390f35b3480156102e157600080fd5b506102ea610a0b565b6040516102f7919061189a565b60405180910390f35b34801561030c57600080fd5b5061032760048036038101906103229190611675565b610a34565b005b34801561033557600080fd5b50610350600480360381019061034b9190611610565b610aab565b60405161035d9190611982565b60405180910390f35b34801561037257600080fd5b5061037b610bac565b6040516103889190611a78565b60405180910390f35b34801561039d57600080fd5b506103b860048036038101906103b39190611675565b610bb2565b005b3480156103c657600080fd5b506103e160048036038101906103dc9190611675565b610eb2565b005b3480156103ef57600080fd5b5061040a60048036038101906104059190611610565b610f5e565b005b34801561041857600080fd5b50610433600480360381019061042e919061157d565b610f68565b005b60006064600960009054906101000a9004600b0b6104616301e143208561045c9190611cfe565b6108b8565b61046b9190611fb7565b6104759190611c94565b9050919050565b610484611060565b73ffffffffffffffffffffffffffffffffffffffff166104a2610a0b565b73ffffffffffffffffffffffffffffffffffffffff16146104f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ef90611a18565b60405180910390fd5b4782111561053b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053290611a58565b60405180910390fd5b6105458282611068565b6000600267ffffffffffffffff811115610588577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156105b65781602001602082028036833780820191505090505b509050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110610616577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816001815181106106ad577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060006106f284611139565b9050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ff36ab585838587601e426107439190611bd4565b6040518663ffffffff1660e01b81526004016107629493929190611a93565b6000604051808303818588803b15801561077b57600080fd5b505af115801561078f573d6000803e3d6000fd5b50505050506040513d6000823e3d601f19601f820116820180604052508101906107b991906115a6565b5050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610838611060565b73ffffffffffffffffffffffffffffffffffffffff16610856610a0b565b73ffffffffffffffffffffffffffffffffffffffff16146108ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a390611a18565b60405180910390fd5b6108b66000611167565b565b6000806000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b95ed06f600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b815260040161093a919061189a565b604080518083038186803b15801561095157600080fd5b505afa158015610965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109899190611639565b9150915080600a61099a9190611d82565b82856109a69190611ea0565b6109b09190611c2a565b92505050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b80600354610a429190611bd4565b60025411610a85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7c906119b8565b60405180910390fd5b8060036000828254610a979190611bd4565b92505081905550610aa8338261122b565b50565b6000806000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b95ed06f600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401610b2d919061189a565b604080518083038186803b158015610b4457600080fd5b505afa158015610b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7c9190611639565b91509150818482600a610b8f9190611d82565b610b999190611ea0565b610ba39190611c2a565b92505050919050565b60035481565b610bba611060565b73ffffffffffffffffffffffffffffffffffffffff16610bd8610a0b565b73ffffffffffffffffffffffffffffffffffffffff1614610c2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2590611a18565b60405180910390fd5b610c37816112ea565b6000600267ffffffffffffffff811115610c7a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610ca85781602001602082028036833780820191505090505b509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110610d08577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600181518110610d9f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000610de483611139565b9050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318cbafe584838530601e42610e359190611bd4565b6040518663ffffffff1660e01b8152600401610e55959493929190611adf565b600060405180830381600087803b158015610e6f57600080fd5b505af1158015610e83573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610eac91906115a6565b50505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3990611a38565b60405180910390fd5b8060036000828254610f549190612100565b9250508190555050565b8060088190555050565b610f70611060565b73ffffffffffffffffffffffffffffffffffffffff16610f8e610a0b565b73ffffffffffffffffffffffffffffffffffffffff1614610fe4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fdb90611a18565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611054576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104b906119d8565b60405180910390fd5b61105d81611167565b50565b600033905090565b611070611060565b73ffffffffffffffffffffffffffffffffffffffff1661108e610a0b565b73ffffffffffffffffffffffffffffffffffffffff16146110e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110db90611a18565b60405180910390fd5b816003546110f29190611bd4565b60025411611135576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112c906119f8565b60405180910390fd5b5050565b600060646005606461114b9190612100565b8361115691906120a6565b6111609190611cfe565b9050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166357ae14a47f00000000000000000000000000000000000000000000000000000000000000008461129485610435565b856040518563ffffffff1660e01b81526004016112b494939291906118b5565b600060405180830381600087803b1580156112ce57600080fd5b505af11580156112e2573d6000803e3d6000fd5b505050505050565b6112f2611060565b73ffffffffffffffffffffffffffffffffffffffff16611310610a0b565b73ffffffffffffffffffffffffffffffffffffffff1614611366576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135d90611a18565b60405180910390fd5b80600260008282546113789190611bd4565b92505081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd7f000000000000000000000000000000000000000000000000000000000000000030846040518463ffffffff1660e01b81526004016113fe939291906118fa565b602060405180830381600087803b15801561141857600080fd5b505af115801561142c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145091906115e7565b5050565b600061146761146284611b5e565b611b39565b9050808382526020820190508285602086028201111561148657600080fd5b60005b858110156114b6578161149c8882611553565b845260208401935060208301925050600181019050611489565b5050509392505050565b6000813590506114cf816124c2565b92915050565b600082601f8301126114e657600080fd5b81516114f6848260208601611454565b91505092915050565b60008151905061150e816124d9565b92915050565b600081359050611523816124f0565b92915050565b600081519050611538816124f0565b92915050565b60008135905061154d81612507565b92915050565b60008151905061156281612507565b92915050565b6000815190506115778161251e565b92915050565b60006020828403121561158f57600080fd5b600061159d848285016114c0565b91505092915050565b6000602082840312156115b857600080fd5b600082015167ffffffffffffffff8111156115d257600080fd5b6115de848285016114d5565b91505092915050565b6000602082840312156115f957600080fd5b6000611607848285016114ff565b91505092915050565b60006020828403121561162257600080fd5b600061163084828501611514565b91505092915050565b6000806040838503121561164c57600080fd5b600061165a85828601611529565b925050602061166b85828601611568565b9150509250929050565b60006020828403121561168757600080fd5b60006116958482850161153e565b91505092915050565b600080604083850312156116b157600080fd5b60006116bf8582860161153e565b92505060206116d0858286016114c0565b9150509250929050565b60006116e683836116f2565b60208301905092915050565b6116fb81612134565b82525050565b61170a81612134565b82525050565b600061171b82611b9a565b6117258185611bb2565b935061173083611b8a565b8060005b8381101561176157815161174888826116da565b975061175383611ba5565b925050600181019050611734565b5085935050505092915050565b611777816121a0565b82525050565b611786816121c4565b82525050565b611795816121e8565b82525050565b6117a481612152565b82525050565b6117b38161215c565b82525050565b60006117c6604583611bc3565b91506117d1826122e8565b606082019050919050565b60006117e9602683611bc3565b91506117f48261235d565b604082019050919050565b600061180c604583611bc3565b9150611817826123ac565b606082019050919050565b600061182f602083611bc3565b915061183a82612421565b602082019050919050565b6000611852603c83611bc3565b915061185d8261244a565b604082019050919050565b6000611875601a83611bc3565b915061188082612499565b602082019050919050565b61189481612189565b82525050565b60006020820190506118af6000830184611701565b92915050565b60006080820190506118ca6000830187611701565b6118d76020830186611701565b6118e460408301856117aa565b6118f1606083018461188b565b95945050505050565b600060608201905061190f6000830186611701565b61191c6020830185611701565b611929604083018461188b565b949350505050565b6000602082019050611946600083018461176e565b92915050565b6000602082019050611961600083018461177d565b92915050565b600060208201905061197c600083018461178c565b92915050565b6000602082019050611997600083018461179b565b92915050565b60006020820190506119b260008301846117aa565b92915050565b600060208201905081810360008301526119d1816117b9565b9050919050565b600060208201905081810360008301526119f1816117dc565b9050919050565b60006020820190508181036000830152611a11816117ff565b9050919050565b60006020820190508181036000830152611a3181611822565b9050919050565b60006020820190508181036000830152611a5181611845565b9050919050565b60006020820190508181036000830152611a7181611868565b9050919050565b6000602082019050611a8d600083018461188b565b92915050565b6000608082019050611aa8600083018761188b565b8181036020830152611aba8186611710565b9050611ac96040830185611701565b611ad6606083018461188b565b95945050505050565b600060a082019050611af4600083018861188b565b611b01602083018761188b565b8181036040830152611b138186611710565b9050611b226060830185611701565b611b2f608083018461188b565b9695505050505050565b6000611b43611b54565b9050611b4f828261220c565b919050565b6000604051905090565b600067ffffffffffffffff821115611b7957611b7861229b565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611bdf82612189565b9150611bea83612189565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611c1f57611c1e61223d565b5b828201905092915050565b6000611c3582612152565b9150611c4083612152565b925082611c5057611c4f61226c565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615611c8957611c8861223d565b5b828205905092915050565b6000611c9f8261215c565b9150611caa8361215c565b925082611cba57611cb961226c565b5b600160000383147fffffffffffffffffffffffffffffffffffffffff80000000000000000000000083141615611cf357611cf261223d565b5b828205905092915050565b6000611d0982612189565b9150611d1483612189565b925082611d2457611d2361226c565b5b828204905092915050565b6000808291508390505b6001851115611d7957808604811115611d5557611d5461223d565b5b6001851615611d645780820291505b8081029050611d72856122db565b9450611d39565b94509492505050565b6000611d8d82612189565b9150611d9883612193565b9250611dc57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611dcd565b905092915050565b600082611ddd5760019050611e99565b81611deb5760009050611e99565b8160018114611e015760028114611e0b57611e3a565b6001915050611e99565b60ff841115611e1d57611e1c61223d565b5b8360020a915084821115611e3457611e3361223d565b5b50611e99565b5060208310610133831016604e8410600b8410161715611e6f5782820a905083811115611e6a57611e6961223d565b5b611e99565b611e7c8484846001611d2f565b92509050818404811115611e9357611e9261223d565b5b81810290505b9392505050565b6000611eab82612152565b9150611eb683612152565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615611ef557611ef461223d565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615611f3257611f3161223d565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615611f6f57611f6e61223d565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615611fac57611fab61223d565b5b828202905092915050565b6000611fc28261215c565b9150611fcd8361215c565b9250826b7fffffffffffffffffffffff0482116000841360008413161615611ff857611ff761223d565b5b817fffffffffffffffffffffffffffffffffffffffff80000000000000000000000005831260008412600084131616156120355761203461223d565b5b827fffffffffffffffffffffffffffffffffffffffff80000000000000000000000005821260008413600084121616156120725761207161223d565b5b826b7fffffffffffffffffffffff058212600084126000841216161561209b5761209a61223d565b5b828202905092915050565b60006120b182612189565b91506120bc83612189565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156120f5576120f461223d565b5b828202905092915050565b600061210b82612189565b915061211683612189565b9250828210156121295761212861223d565b5b828203905092915050565b600061213f82612169565b9050919050565b60008115159050919050565b6000819050919050565b600081600b0b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006121ab826121b2565b9050919050565b60006121bd82612169565b9050919050565b60006121cf826121d6565b9050919050565b60006121e182612169565b9050919050565b60006121f3826121fa565b9050919050565b600061220582612169565b9050919050565b612215826122ca565b810181811067ffffffffffffffff821117156122345761223361229b565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f54686572652773206e6f7420656e6f756768206672656520617373657473206960008201527f6e207468697320737472617465677920746f20696e766573742074686973206160208201527f6d6f756e74000000000000000000000000000000000000000000000000000000604082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f54686572652773206e6f7420656e6f756768206672656520617373657473206960008201527f6e207468697320737472617465677920746f2072656d6f76652074686973206160208201527f6d6f756e74000000000000000000000000000000000000000000000000000000604082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f53747261746567795374616e646172643a204f6e6c7920537761707320636f6e60008201527f74726163742063616e2063616c6c20746869732066756e6374696f6e00000000602082015250565b7f4e6f7420656e6f7567682065746820696e207374726174656779000000000000600082015250565b6124cb81612134565b81146124d657600080fd5b50565b6124e281612146565b81146124ed57600080fd5b50565b6124f981612152565b811461250457600080fd5b50565b61251081612189565b811461251b57600080fd5b50565b61252781612193565b811461253257600080fd5b5056fea26469706673582212202b29f7aa703415268531e05e50d2e2de405da88dfc7509eec36caed4a8c026a564736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Caron Case (carsonpcase@gmail.com) contract to standardize what strategies do ",
    "kind": "dev",
    "methods": {
      "buySwap(uint256)": {
        "details": "function to buy swap on the strategy. Can only be done if it's free"
      },
      "fund(uint256)": {
        "details": "fund function to provide funds to the strategy override to provide with the actual logic of the investment strategy"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeFunds(uint256,address)": {
        "details": "function for owner (treasury) to remove funds "
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ETHHODLStrategy",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 389,
        "contract": "contracts/strategies/ETHHODLStrategy.sol:ETHHODLStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12147,
        "contract": "contracts/strategies/ETHHODLStrategy.sol:ETHHODLStrategy",
        "label": "stablecoin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12149,
        "contract": "contracts/strategies/ETHHODLStrategy.sol:ETHHODLStrategy",
        "label": "underlyingInvested",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 12151,
        "contract": "contracts/strategies/ETHHODLStrategy.sol:ETHHODLStrategy",
        "label": "underlyingExposedToSwaps",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 12154,
        "contract": "contracts/strategies/ETHHODLStrategy.sol:ETHHODLStrategy",
        "label": "oracle",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IOracle)12128"
      },
      {
        "astId": 12157,
        "contract": "contracts/strategies/ETHHODLStrategy.sol:ETHHODLStrategy",
        "label": "swaps",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ISwaps)12140"
      },
      {
        "astId": 11760,
        "contract": "contracts/strategies/ETHHODLStrategy.sol:ETHHODLStrategy",
        "label": "eth",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 11763,
        "contract": "contracts/strategies/ETHHODLStrategy.sol:ETHHODLStrategy",
        "label": "dex",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IUniswapV2Router02)11662"
      },
      {
        "astId": 11769,
        "contract": "contracts/strategies/ETHHODLStrategy.sol:ETHHODLStrategy",
        "label": "priceUSD",
        "offset": 0,
        "slot": "8",
        "type": "t_int256"
      },
      {
        "astId": 11772,
        "contract": "contracts/strategies/ETHHODLStrategy.sol:ETHHODLStrategy",
        "label": "apr",
        "offset": 0,
        "slot": "9",
        "type": "t_int96"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IOracle)12128": {
        "encoding": "inplace",
        "label": "contract IOracle",
        "numberOfBytes": "20"
      },
      "t_contract(ISwaps)12140": {
        "encoding": "inplace",
        "label": "contract ISwaps",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)11662": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_int96": {
        "encoding": "inplace",
        "label": "int96",
        "numberOfBytes": "12"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}