{
  "language": "Solidity",
  "sources": {
    "contracts/strategies/ETHHODLStrategy.sol": {
      "content": "// SPDX-License-Identifier: None\npragma solidity ^0.8.0;\n\nimport \"./StrategyStandard.sol\";\nimport \"../interfaces/IUniswapV2Router02.sol\";\n\n\n/**\n* @title ETHHODLStrategy\n* @author Caron Case (carsonpcase@gmail.com)\n    contract to standardize what strategies do \n*/\ncontract ETHHODLStrategy is StrategyStandard{\n    // for testing\n    address public eth;\n\n    IUniswapV2Router02 public dex;\n    uint constant secondsInYear = 31540000;\n\n    int priceUSD = 2;\n    int96 apr = 12;\n\n    uint constant SLIPPAGE = 5;                     // making this owner controlled is not a bad idea\n    uint constant ONE_HUNDRED_PERCENT = 100;\n    \n    constructor(address _swaps, address _treasury, address _oracle, address _dex) StrategyStandard(_treasury, _oracle){\n        swaps = ISwaps(_swaps);\n        dex = IUniswapV2Router02(_dex);\n        IERC20(stablecoin).approve(_dex,2**256-1);\n        transferOwnership(_treasury);\n        eth = dex.WETH();\n    }\n\n    receive() payable external{\n\n    }\n\n    // TEST only\n    function updatePriceE18(int _new) external{\n        priceUSD = _new;\n    }\n\n    function fund(uint256 _amountInvestment) public override onlyOwner{\n        super.fund(_amountInvestment);\n        address[] memory path = new address[](2);\n        path[0] = stablecoin;\n        path[1] = eth;\n\n        uint minOut = _getMinOut(_amountInvestment, path);\n        dex.swapExactTokensForETH(_amountInvestment,minOut,path,address(this),block.timestamp + 30);\n    }\n\n    function removeFunds(uint256 _amountToRemove, address _receiver) public override onlyOwner{\n        require(_amountToRemove <= address(this).balance, \"Not enough eth in strategy\");\n        super.removeFunds(_amountToRemove, _receiver);\n\n        address[] memory path = new address[](2);\n        path[0] = eth;\n        path[1] = stablecoin;\n\n        uint minOut = _getMinOut(_amountToRemove, path);\n        dex.swapExactETHForTokens{value: _amountToRemove}(minOut, path, _receiver, block.timestamp + 30);\n    }\n\n    function getPriceUnderlyingUSD(uint _underlyingAm) public view override returns(int){\n        (int price, uint8 decimals) = oracle.priceOf(eth);\n        return((int(_underlyingAm) * price) / int(10**decimals));\n    }\n\n    function getAmountOfUnderlyingForUSD(int _amount) public view override returns(int){\n        (int price, uint8 decimals) = oracle.priceOf(eth);\n        return((int(10**decimals) * (int(_amount)) / price));\n    }\n\n    function getFlowRate(uint _amountUnderlying) public view returns(int96){\n        return (int96(getPriceUnderlyingUSD(_amountUnderlying/secondsInYear)) * apr) / 100;\n    }\n\n    /**\n    * @dev override just handles swaps logic. Verifying underlying available is done in parent\n     */\n    function _issueSwap(address _issueTo, uint _amountUnderlying) internal override{\n        swaps.newSwap(treasury,_issueTo, getFlowRate(_amountUnderlying),_amountUnderlying);\n    }\n\n    /**\n    * todo: Make this not dumb. Needs to actually use the router to find the price of the token...\n     */\n    function _getMinOut(uint _amountIn, address[] memory _path) internal view returns(uint minOut){\n        uint out = dex.getAmountsOut(_amountIn, _path)[_path.length-1];\n        minOut = (out * (ONE_HUNDRED_PERCENT - SLIPPAGE)) / ONE_HUNDRED_PERCENT;\n    }\n\n\n}"
    },
    "contracts/strategies/StrategyStandard.sol": {
      "content": "// SPDX-License-Identifier: None\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ITreasury{\n    function stablecoin() external returns(IERC20);\n}\n\ninterface IOracle{\n    function priceOf(address) external view returns(int,uint8);\n}\n\ninterface ISwaps{\n    function newSwap(address _receiver, address _payer, int96 _requiredFlowRate, uint _amountUnderlying) external;\n}\n\n/**\n* @title StrategyStandard\n* @author Caron Case (carsonpcase@gmail.com)\n    contract to standardize what strategies do \n*/\nabstract contract StrategyStandard is Ownable{\n    address public immutable treasury;\n    address internal stablecoin;\n    uint256 public underlyingInvested;\n    uint256 public underlyingExposedToSwaps;\n    IOracle public oracle;\n    ISwaps public swaps;\n\n    constructor(address _treasury, address _oracle) Ownable(){\n        treasury = _treasury;\n        stablecoin = address(ITreasury(_treasury).stablecoin());\n        oracle = IOracle(_oracle);\n    }\n\n    modifier onlySwaps(){\n        require(msg.sender == address(swaps), \"StrategyStandard: Only Swaps contract can call this function\");\n        _;\n    }\n\n    function getPriceUnderlyingUSD(uint _underlyingAm) external view virtual returns(int){\n        (int price, uint8 decimals) = oracle.priceOf(stablecoin);\n        return((int(_underlyingAm) * price) / int(10**decimals));\n    }\n\n    function getAmountOfUnderlyingForUSD(int _amount) public view virtual returns(int){\n        (int price, uint8 decimals) = oracle.priceOf(stablecoin);\n        return((int(10**decimals) * (int(_amount)) / price));\n    }\n\n\n    /**\n    * @dev fund function to provide funds to the strategy\n    * override to provide with the actual logic of the investment strategy\n     */\n    function fund(uint256 _amountInvestment) public virtual onlyOwner{\n        underlyingInvested += _amountInvestment;\n        IERC20(stablecoin).transferFrom(treasury, address(this), _amountInvestment);\n    }   \n\n    /**\n    * @dev function for owner (treasury) to remove funds \n     */\n    function removeFunds(uint256 _amountToRemove, address _receiver) public virtual onlyOwner{\n        require(underlyingInvested > underlyingExposedToSwaps + _amountToRemove, \"There's not enough free assets in this strategy to remove this amount\"); \n    }\n\n    function closeSwap(uint256 _amountToRemove) public virtual onlySwaps{\n        underlyingExposedToSwaps -= _amountToRemove;\n    }\n\n    /**\n    * @dev function to buy swap on the strategy. Can only be done if it's free\n     */\n    function buySwap(uint256 _amountUnderlying) public virtual{\n        require(underlyingInvested > underlyingExposedToSwaps + _amountUnderlying, \"There's not enough free assets in this strategy to invest this amount\"); \n        underlyingExposedToSwaps += _amountUnderlying;\n        _issueSwap(msg.sender, _amountUnderlying);\n    }\n    \n\n    /**\n    * @dev handles logic of issuing swap\n     */\n    function _issueSwap(address _issueTo, uint _amountUnderlying) internal virtual{\n        // issue NFT with supperfuild superapp\n        // and send other end of NFT to treasury\n    }\n\n}"
    },
    "contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.8.0;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.8.0;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}